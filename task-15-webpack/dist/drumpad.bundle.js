(()=>{"use strict";var n={2433:(n,r,e)=>{e.d(r,{Z:()=>l});var t=e(4015),o=e.n(t),a=e(3645),i=e.n(a),c=e(1667),s=e.n(c),u=new URL(e(349),e.b),d=i()(o()),A=s()(u);d.push([n.id,".banner {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: url("+A+') no-repeat center center / cover;\r\n    z-index: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.banner::before {\r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.4);\r\n    z-index: 0;\r\n}\r\n\r\n.sound-button {\r\n    cursor: pointer;\r\n    width: 100px;\r\n    padding: 20px 0;\r\n    z-index: 1;\r\n    margin: 0 8px 8px 8px;\r\n    background: rgba(255, 255, 255, 0.15);\r\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\r\n    backdrop-filter: blur(10px);\r\n    -webkit-backdrop-filter: blur(10px);\r\n    border-radius: 10px;\r\n    border: 3px solid rgba(255, 255, 255, 0.25);\r\n    transition: 0.2s all ease;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.sound-button__key {\r\n    font-size: 2em;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n    line-height: 1.2;\r\n    user-select: none;\r\n    pointer-events: none;\r\n}\r\n\r\n.sound-button__sound-name {\r\n    font-size: 1em;\r\n    color: #ffb235;\r\n    user-select: none;\r\n    pointer-events: none;\r\n}\r\n\r\n.sound-button__playing {\r\n    transform: scale(1.1);\r\n    border-color: #ffb235;\r\n}',"",{version:3,sources:["webpack://./src/drumpad/style.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mFAA0E;IAC1E,UAAU;IACV,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,8BAA8B;IAC9B,UAAU;AACd;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,eAAe;IACf,UAAU;IACV,qBAAqB;IACrB,qCAAqC;IACrC,gDAAgD;IAChD,2BAA2B;IAC3B,mCAAmC;IACnC,mBAAmB;IACnB,2CAA2C;IAC3C,yBAAyB;;IAEzB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,yBAAyB;IACzB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,cAAc;IACd,cAAc;IACd,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,qBAAqB;IACrB,qBAAqB;AACzB",sourcesContent:['.banner {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: url("./images/background.jpg") no-repeat center center / cover;\r\n    z-index: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.banner::before {\r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.4);\r\n    z-index: 0;\r\n}\r\n\r\n.sound-button {\r\n    cursor: pointer;\r\n    width: 100px;\r\n    padding: 20px 0;\r\n    z-index: 1;\r\n    margin: 0 8px 8px 8px;\r\n    background: rgba(255, 255, 255, 0.15);\r\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\r\n    backdrop-filter: blur(10px);\r\n    -webkit-backdrop-filter: blur(10px);\r\n    border-radius: 10px;\r\n    border: 3px solid rgba(255, 255, 255, 0.25);\r\n    transition: 0.2s all ease;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.sound-button__key {\r\n    font-size: 2em;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n    line-height: 1.2;\r\n    user-select: none;\r\n    pointer-events: none;\r\n}\r\n\r\n.sound-button__sound-name {\r\n    font-size: 1em;\r\n    color: #ffb235;\r\n    user-select: none;\r\n    pointer-events: none;\r\n}\r\n\r\n.sound-button__playing {\r\n    transform: scale(1.1);\r\n    border-color: #ffb235;\r\n}'],sourceRoot:""}]);const l=d},3645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);t&&o[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),r.push(s))}},r}},4015:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var t,o,a=[],i=!0,c=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(a.push(t.value),!r||a.length!==r);i=!0);}catch(n){c=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(c)throw o}}return a}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),u="/*# ".concat(s," */"),d=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(d).concat([u]).join("\n")}return[a].join("\n")}},1667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},3379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],u=t.base?s[0]+t.base:s[0],d=a[u]||0,A="".concat(u," ").concat(d);a[u]=d+1;var l=e(A),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==l?(r[l].references++,r[l].updater(f)):r.push({identifier:A,updater:o(f,t),references:1}),i.push(A)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=e(a[i]);r[c].references--}for(var s=t(n,o),u=0;u<a.length;u++){var d=e(a[u]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}a=s}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},9216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r),r}},3565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},3380:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t=e.css,o=e.media,a=e.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},4589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},349:(n,r,e)=>{n.exports=e.p+"daebf9785f4e06a85232.jpg"}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),e.p="/task-15-webpack/",e.b=document.baseURI||self.location.href,(()=>{function n(n){n&&(n.currentTime=0,n.play())}var r=e(3379),t=e.n(r),o=e(3380),a=e.n(o),i=e(569),c=e.n(i),s=e(3565),u=e.n(s),d=e(9216),A=e.n(d),l=e(4589),f=e.n(l),p=e(2433),b={};b.styleTagTransform=f(),b.setAttributes=u(),b.insert=c().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=A(),t()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals;var m=[e.p+"b89029b77ab6ead645d208bcf8e5f0da.wav",e.p+"54d8761d5853aff7571d848e25b8420c.wav",e.p+"2c65c0205b6afb9b51bd21d551143476.wav",e.p+"ace33dadee64fde36650e74aac063be9.wav",e.p+"0c988b1cc0ed166a3b39d22940ce61af.wav",e.p+"257b5665d4584902ea07e76fcd25ff2a.wav",e.p+"6d022aff8cdf01842109329a0c8bf53f.wav",e.p+"7628c1e5f867a09c9320e57a6b9470de.wav",e.p+"d9e8126f95de872668ff04d85317988d.wav"];document.querySelectorAll("audio.sound").forEach((function(n,r){n.src=m[r]})),document.addEventListener("keyup",(function(r){var e=r.keyCode,t=document.querySelector("audio[data-key='".concat(e,"']")),o=document.querySelector(".sound-button[data-key='".concat(e,"']"));n(t),o.classList.add("sound-button__playing")}));var v=document.querySelectorAll(".sound-button");v.forEach((function(r){r.addEventListener("click",(function(e){var t=e.target.dataset.key;n(document.querySelector("audio[data-key='".concat(t,"']"))),r.classList.add("sound-button__playing")}))})),v.forEach((function(n){n.addEventListener("transitionend",(function(r){"transform"==r.propertyName&&n.classList.remove("sound-button__playing")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZHJ1bXBhZC9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2V4cG9ydHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2RydW1wYWQvc3R5bGUuY3NzPzAwMjYiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2RydW1wYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2RydW1wYWQvYXVkaW8vOGJpdGtpdC1ib3VuY2UtMi53YXYiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2RydW1wYWQvYXVkaW8vOGJpdGtpdC1jb2luLTEwLndhdiIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZHJ1bXBhZC9hdWRpby84Yml0a2l0LWV4cGxvc2lvbi0yLndhdiIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZHJ1bXBhZC9hdWRpby84Yml0a2l0LWZhbGwud2F2Iiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9kcnVtcGFkL2F1ZGlvLzhiaXRraXQtaGl0LTQud2F2Iiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9kcnVtcGFkL2F1ZGlvLzhiaXRraXQtanVtcC02LndhdiIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZHJ1bXBhZC9hdWRpby84Yml0a2l0LWxhc2VyLTQud2F2Iiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9kcnVtcGFkL2F1ZGlvLzhiaXRraXQtcG93ZXJ1cC0yLndhdiIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZHJ1bXBhZC9hdWRpby84Yml0a2l0LXNlbGVjdC04LndhdiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJsb2NhdGlvbiIsImhyZWYiLCJwbGF5QXVkaW8iLCJhdWRpbyIsImN1cnJlbnRUaW1lIiwicGxheSIsImF1ZGlvTGlua3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInNyYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb2RlIiwia2V5Q29kZSIsInNvdW5kQnV0dG9uIiwiY2xhc3NMaXN0IiwiYWRkIiwic291bmRCdXR0b25zIiwiYnV0dG9uIiwiZGF0YXNldCIsInByb3BlcnR5TmFtZSJdLCJtYXBwaW5ncyI6InVIQUlJQSxFQUFnQyxJQUFJQyxJQUFJLFlBQ3hDQyxFQUEwQixJQUE0QixLQUN0REMsRUFBcUMsSUFBZ0NILEdBRXpFRSxFQUF3QkUsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLHlHQUEyR0gsRUFBcUMscTFDQUF3MUMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscUNBQXFDLE1BQVEsR0FBRyxTQUFXLHlsQkFBeWxCLGVBQWlCLENBQUMscTlDQUF5OUMsV0FBYSxNQUV4ckgsVyxTQ0ZBRSxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJ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cnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9pbWFnZXMvYmFja2dyb3VuZC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYmFubmVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgYmFja2dyb3VuZDogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlciAvIGNvdmVyO1xcclxcbiAgICB6LWluZGV4OiAxO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbn1cXHJcXG5cXHJcXG4uYmFubmVyOjpiZWZvcmUge1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDA7XFxyXFxuICAgIGxlZnQ6IDA7XFxyXFxuICAgIHJpZ2h0OiAwO1xcclxcbiAgICBib3R0b206IDA7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcXHJcXG4gICAgei1pbmRleDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLnNvdW5kLWJ1dHRvbiB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICBwYWRkaW5nOiAyMHB4IDA7XFxyXFxuICAgIHotaW5kZXg6IDE7XFxyXFxuICAgIG1hcmdpbjogMCA4cHggOHB4IDhweDtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE1KTtcXHJcXG4gICAgYm94LXNoYWRvdzogMCA4cHggMzJweCAwIHJnYmEoMzEsIDM4LCAxMzUsIDAuMzcpO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxyXFxuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IDNweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpO1xcclxcbiAgICB0cmFuc2l0aW9uOiAwLjJzIGFsbCBlYXNlO1xcclxcblxcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc291bmQtYnV0dG9uX19rZXkge1xcclxcbiAgICBmb250LXNpemU6IDJlbTtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XFxyXFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNvdW5kLWJ1dHRvbl9fc291bmQtbmFtZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMWVtO1xcclxcbiAgICBjb2xvcjogI2ZmYjIzNTtcXHJcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uc291bmQtYnV0dG9uX19wbGF5aW5nIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcclxcbiAgICBib3JkZXItY29sb3I6ICNmZmIyMzU7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9kcnVtcGFkL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsYUFBYTtJQUNiLG1GQUEwRTtJQUMxRSxVQUFVO0lBQ1YsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxZQUFZO0lBQ1osOEJBQThCO0lBQzlCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGVBQWU7SUFDZixZQUFZO0lBQ1osZUFBZTtJQUNmLFVBQVU7SUFDVixxQkFBcUI7SUFDckIscUNBQXFDO0lBQ3JDLGdEQUFnRDtJQUNoRCwyQkFBMkI7SUFDM0IsbUNBQW1DO0lBQ25DLG1CQUFtQjtJQUNuQiwyQ0FBMkM7SUFDM0MseUJBQXlCOztJQUV6QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCx5QkFBeUI7SUFDekIsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksY0FBYztJQUNkLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLHFCQUFxQjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYmFubmVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgYmFja2dyb3VuZDogdXJsKFxcXCIuL2ltYWdlcy9iYWNrZ3JvdW5kLmpwZ1xcXCIpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIC8gY292ZXI7XFxyXFxuICAgIHotaW5kZXg6IDE7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxufVxcclxcblxcclxcbi5iYW5uZXI6OmJlZm9yZSB7XFxyXFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgbGVmdDogMDtcXHJcXG4gICAgcmlnaHQ6IDA7XFxyXFxuICAgIGJvdHRvbTogMDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjQpO1xcclxcbiAgICB6LWluZGV4OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uc291bmQtYnV0dG9uIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggMDtcXHJcXG4gICAgei1pbmRleDogMTtcXHJcXG4gICAgbWFyZ2luOiAwIDhweCA4cHggOHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTUpO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDhweCAzMnB4IDAgcmdiYSgzMSwgMzgsIDEzNSwgMC4zNyk7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSk7XFxyXFxuICAgIHRyYW5zaXRpb246IDAuMnMgYWxsIGVhc2U7XFxyXFxuXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zb3VuZC1idXR0b25fX2tleSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMmVtO1xcclxcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcXHJcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uc291bmQtYnV0dG9uX19zb3VuZC1uYW1lIHtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxuICAgIGNvbG9yOiAjZmZiMjM1O1xcclxcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5zb3VuZC1idXR0b25fX3BsYXlpbmcge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogI2ZmYjIzNTtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvdGFzay0xNS13ZWJwYWNrL1wiOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDc2MzogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIDNcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BhbHluZHJvbShzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNvbXByZXNzZWQgPSBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlQWxsKC9bXFxz4oCUXyxcXC5dL2dpLCAnJykuc3BsaXQoJycpLmpvaW4oJycpO1xyXG4gICAgY29uc3QgcmV2ZXJzZWQgPSBjb21wcmVzc2VkLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XHJcblxyXG4gICAgcmV0dXJuIGDQodGC0YDQvtC60LAgXCIke3N0cmluZ31cIiAke2NvbXByZXNzZWQgPT09IHJldmVyc2VkID8gJycgOiAn0L3QtSAnfdGP0LLQu9GP0LXRgtGM0YHRjyDQv9C+0LvQuNC90LTRgNC+0LzQvtC8YDtcclxufVxyXG5cclxuLy8gNCBcclxuXHJcbmV4cG9ydCBjb25zdCBzdHVkZW50cyA9IFtcItCe0LvQtdC60YHQsNC90LTRgFwiLCBcItCG0LPQvtGAXCIsIFwi0J7Qu9C10L3QsFwiLCBcItCG0YDQsFwiLCBcItCe0LvQtdC60YHRltC5XCIsIFwi0KHQstGW0YLQu9Cw0L3QsFwiXTtcclxuZXhwb3J0IGNvbnN0IG1hcmtzID0gWzQsIDUsIDUsIDMsIDQsIDVdO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldFN0dWRlbnRzTWFya3MgPSAoc3R1ZGVudHMsIG1hcmtzKSA9PiB7XHJcbiAgICBjb25zdCBzdHVkZW50c01hcmtzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHVkZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBzdHVkZW50c01hcmtzW2ldID0gW3N0dWRlbnRzW2ldLCBtYXJrc1tpXV07XHJcblxyXG4gICAgcmV0dXJuIHN0dWRlbnRzTWFya3M7XHJcbn1cclxuXHJcbi8vIDVcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQmFkV29yZHMoc3RyaW5nLCAuLi5hZGRpdGlvbmFsKSB7XHJcblxyXG4gICAgaWYgKCFzdHJpbmcubGVuZ3RoKSByZXR1cm4gJ9CS0Lgg0L3RltGH0L7Qs9C+INC90LUg0LLQstC10LvQuCEnO1xyXG5cclxuICAgIGNvbnN0IGV4cGxldGl2ZXMgPSBbJ3NoaXQnLCAnZnVjaycsIC4uLmFkZGl0aW9uYWxdO1xyXG4gICAgbGV0IHdvcmRzID0gc3RyaW5nLnNwbGl0KCcgJyk7XHJcbiAgICB3b3JkcyA9IHdvcmRzLm1hcCh3b3JkID0+IHtcclxuICAgICAgICBpZiAoZXhwbGV0aXZlcy5zb21lKGN1cnNlID0+IHdvcmQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhjdXJzZSkpKSB7XHJcbiAgICAgICAgICAgIGxldCBmb3VuZEN1cnNlcyA9IGV4cGxldGl2ZXMuZmlsdGVyKGN1cnNlID0+IHdvcmQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhjdXJzZSkpO1xyXG4gICAgICAgICAgICBmb3VuZEN1cnNlcy5mb3JFYWNoKGN1cnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjZW5zdXJlID0gJyonLnJlcGVhdChjdXJzZS5sZW5ndGgpLCByZWdFeHAgPSBuZXcgUmVnRXhwKGN1cnNlLCAnZ2knKTtcclxuICAgICAgICAgICAgICAgIHdvcmQgPSB3b3JkLnJlcGxhY2VBbGwocmVnRXhwLCBjZW5zdXJlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gd29yZDtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHdvcmRzLmpvaW4oJyAnKTtcclxufVxyXG5cclxuLy8gNlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVdvcmRMZXR0ZXJzKHdvcmQpIHtcclxuICAgIGlmICghd29yZCkgcmV0dXJuICfQn9GD0YHRgtC1INGB0LvQvtCy0L4nO1xyXG4gICAgY29uc3QgcmVwZWF0cyA9IFsuLi53b3JkXS5yZWR1Y2UoKHJlc3VsdE9iaiwgbGV0dGVyKSA9PiB7XHJcbiAgICAgICAgcmVzdWx0T2JqW2xldHRlcl0gPSBsZXR0ZXIgaW4gcmVzdWx0T2JqID8gcmVzdWx0T2JqW2xldHRlcl0gOiAwO1xyXG4gICAgICAgIHJlc3VsdE9ialtsZXR0ZXJdKys7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9iajtcclxuICAgIH0sIHt9KTtcclxuXHJcbiAgICByZXR1cm4gcmVwZWF0cztcclxufVxyXG5cclxuLy8gN1xyXG5cclxuZXhwb3J0IGNvbnN0IHVrcmFpbmUgPSB7IHRheDogMC4xOTUsIG1pZGRsZVNhbGFyeTogMTc4OSwgdmFjYW5jaWVzOiAxMTQ3NiB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvdGFsVGF4ZXMoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnRheCAqIHRoaXMubWlkZGxlU2FsYXJ5ICogdGhpcy52YWNhbmNpZXMpO1xyXG59XHJcblxyXG4vLzggXHJcblxyXG5leHBvcnQgY2xhc3MgU3R1ZGVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1bml2ZXJzaXR5LCBjb3Vyc2UsIGZ1bGxOYW1lKSB7XHJcbiAgICAgICAgdGhpcy51bml2ZXJzaXR5ID0gdW5pdmVyc2l0eTtcclxuICAgICAgICB0aGlzLmNvdXJzZSA9IGNvdXJzZTtcclxuICAgICAgICB0aGlzLmZ1bGxOYW1lID0gZnVsbE5hbWU7XHJcbiAgICAgICAgdGhpcy5tYXJrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWNjZXB0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZm8gPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGDQodGC0YPQtNC10L3RgiAke3RoaXMuY291cnNlfS3Qs9C+INC60YPRgNGB0YMgJHt0aGlzLnVuaXZlcnNpdHl9LCAke3RoaXMuZnVsbE5hbWV9YDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBdmVyYWdlTWFyayA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5hY2NlcHRlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzdW0gPSB0aGlzLm1hcmtzLnJlZHVjZSgocHJldiwgdG90YWwpID0+IHRvdGFsICsgcHJldiwgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5tYXJrcy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKyhzdW0gLyBjb3VudCkudG9GaXhlZCgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0dWRlbnRNYXJrcygpIHtcclxuICAgICAgICBpZiAodGhpcy5hY2NlcHRlZCkgcmV0dXJuIHRoaXMubWFya3M7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN0dWRlbnRNYXJrcyhtYXJrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWNjZXB0ZWQpIHRoaXMubWFya3MucHVzaChtYXJrKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNtaXNzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWNjZXB0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZWNvdmVyID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWNjZXB0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyA5XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tQ29sb3IgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjb2xvciA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgY29sb3IucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYHJnYigke2NvbG9yWzBdfSwke2NvbG9yWzFdfSwke2NvbG9yWzJdfSlgO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQmxvY2sgPSAoc2l6ZSwgY29sb3IpID0+IHtcclxuICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBibG9jay5jbGFzc0xpc3QuYWRkKCdibG9jaycpO1xyXG4gICAgYmxvY2suc3R5bGUud2lkdGggPSBgJHtzaXplfXB4YDtcclxuICAgIGJsb2NrLnN0eWxlLmhlaWdodCA9IGAke3NpemV9cHhgO1xyXG4gICAgYmxvY2suc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XHJcblxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVCbG9ja3MgPSAoc2l6ZSA9IDUwLCBjb2xzID0gNSwgcm93cyA9IDUpID0+IHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcclxuXHJcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdibG9ja3Mtcm93Jyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gY3JlYXRlQmxvY2soc2l6ZSwgZ2V0UmFuZG9tQ29sb3IoKSk7XHJcbiAgICAgICAgICAgIHJvdy5hcHBlbmQoYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHJvdyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIDEwIChhdWRpbyBwbGF5IGZ1bmMpXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGxheUF1ZGlvKGF1ZGlvKSB7XHJcbiAgICBpZiAoIWF1ZGlvKSByZXR1cm47XHJcbiAgICBhdWRpby5jdXJyZW50VGltZSA9IDA7XHJcbiAgICBhdWRpby5wbGF5KCk7XHJcbn1cclxuXHJcblxyXG4vLyAxMVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJhbmRvbUNoaW5lc2UobGVuZ3RoKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGl0ZXJhdGlvbiA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbmVzZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoK0RhdGUubm93KCkudG9TdHJpbmcoKS5zbGljZSgtNSkpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjaGluZXNlKTtcclxuICAgICAgICAgICAgfSwgNTAgKiBpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXN1bHQgKz0gYXdhaXQgaXRlcmF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8vIDEzXHJcblxyXG5leHBvcnQgY29uc3QgbG9hZEpTT04gPSAodXJsKSA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsKS50aGVuKGRhdGEgPT4gZGF0YS5qc29uKCkpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZFBlb3BsZSA9IChmaWxtLCBmb3JtYXQpID0+IHtcclxuICAgIGNvbnN0IGNoYXJhY3RlcnNMaW5rcyA9IGZpbG0uY2hhcmFjdGVycztcclxuICAgIGNvbnN0IHJlcXVlc3RzID0gY2hhcmFjdGVyc0xpbmtzLm1hcChjaGFyYWN0ZXJMaW5rID0+IGxvYWRKU09OKGNoYXJhY3RlckxpbmsgKyAnP2Zvcm1hdD0nICsgZm9ybWF0KSk7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVxdWVzdHMpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0R2VuZGVySWNvbiA9IChnZW5kZXIsIGZvcm1hdCkgPT4ge1xyXG4gICAgY29uc3QgbWFsZVZhbHVlID0gZm9ybWF0ID09PSAnd29va2llZScgPyAnc2NyYWFud28nIDogJ21hbGUnO1xyXG4gICAgY29uc3QgZmVtYWxlVmFsdWUgPSBmb3JtYXQgPT09ICd3b29raWVlJyA/ICd3d3dvc2NyYWFud28nIDogJ2ZlbWFsZSc7XHJcbiAgICBpZiAoZ2VuZGVyID09PSBtYWxlVmFsdWUpIHJldHVybiAnPHNwYW4gY2xhc3M9XCJnZW5kZXJcIj48aSBjbGFzcz1cImZhcyBmYS1tYXJzXCI+PC9pPjwvc3Bhbj4nO1xyXG4gICAgZWxzZSBpZiAoZ2VuZGVyID09PSBmZW1hbGVWYWx1ZSkgcmV0dXJuICc8c3BhbiBjbGFzcz1cImdlbmRlclwiPjxpIGNsYXNzPVwiZmFzIGZhLXZlbnVzXCI+PC9pPjwvc3Bhbj4nO1xyXG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImdlbmRlclwiPiR7Z2VuZGVyfTwvc3Bhbj5gO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd1Blb3BsZSA9IGFzeW5jIChwZW9wbGUsIGltYWdlcywgZmlsbSwgZm9ybWF0KSA9PiB7XHJcbiAgICBjb25zdCBwZW9wbGVJbWFnZXMgPSBpbWFnZXMucGVvcGxlO1xyXG4gICAgY29uc3QgY2hhcmFjdGVyc0xpbmtzID0gZmlsbS5jaGFyYWN0ZXJzO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnRNYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcclxuICAgIGNvbnN0IHBlb3BsZVNlY3Rpb24gPSBjb250ZW50TWFpbi5xdWVyeVNlbGVjdG9yKCcucGVvcGxlLXNlY3Rpb24nKTtcclxuICAgIGNvbnN0IHBlb3BsZVNlY3Rpb25Jbm5lciA9IHBlb3BsZVNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX2lubmVyJyk7XHJcbiAgICBjb25zdCBwZW9wbGVUaXRsZSA9IHBlb3BsZVNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX3RpdGxlJyk7XHJcbiAgICBjb25zdCBwZW9wbGVSb3cgPSBwZW9wbGVTZWN0aW9uSW5uZXIucXVlcnlTZWxlY3RvcignLnJvdy5wZW9wbGUtcm93Jyk7XHJcblxyXG4gICAgcGVvcGxlVGl0bGUudGV4dENvbnRlbnQgPSBgUGVvcGxlIGZyb20gZXBpc29kZSAke2ZpbG0uZXBpc29kZV9pZH06IFwiJHtmaWxtLnRpdGxlfVwiYDtcclxuICAgIHBlb3BsZVJvdy5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICBjb25zdCBuYW1lUHJvcGVydHkgPSBmb3JtYXQgPT09ICd3b29raWVlJyA/ICd3aHJhc2N3bycgOiAnbmFtZSc7XHJcbiAgICBjb25zdCBiaXJ0aFllYXJQcm9wZXJ0eSA9IGZvcm1hdCA9PT0gJ3dvb2tpZWUnID8gJ3JoYWhyY2FvYWNfcm93b3JhcmMnIDogJ2JpcnRoX3llYXInO1xyXG4gICAgY29uc3QgZ2VuZGVyUHJvcGVydHkgPSBmb3JtYXQgPT09ICd3b29raWVlJyA/ICdycndvd2h3YXdvcmMnIDogJ2dlbmRlcic7XHJcblxyXG4gICAgcGVvcGxlLmZvckVhY2goKGh1bWFuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGh1bWFuSW1hZ2VQYXRoID0gcGVvcGxlSW1hZ2VzW2NoYXJhY3RlcnNMaW5rc1tpbmRleF1dO1xyXG4gICAgICAgIGNvbnN0IGh1bWFuQ29sdW1uID0gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtbGctNCBjb2wtbWQtNiBodW1hbi13cmFwcGVyJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz0naHVtYW4nPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naHVtYW5fX2hlYWRlcic+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0naHVtYW5fX3Bob3RvJyBzcmM9JyR7aHVtYW5JbWFnZVBhdGh9Jz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naHVtYW5fX2JvZHknPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0naHVtYW5fX25hbWUnPiR7aHVtYW5bbmFtZVByb3BlcnR5XX08L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdodW1hbl9fYmlydGgteWVhcic+JHtmb3JtYXRQcm9wZXJ0eShiaXJ0aFllYXJQcm9wZXJ0eSl9OiAke2h1bWFuW2JpcnRoWWVhclByb3BlcnR5XX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2h1bWFuX19nZW5kZXInPiR7Zm9ybWF0UHJvcGVydHkoZ2VuZGVyUHJvcGVydHkpfTogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7Z2V0R2VuZGVySWNvbihodW1hbltnZW5kZXJQcm9wZXJ0eV0sIGZvcm1hdCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG4gICAgICAgIHBlb3BsZVJvdy5pbm5lckhUTUwgKz0gaHVtYW5Db2x1bW47XHJcbiAgICB9KTtcclxuXHJcbiAgICBwZW9wbGVTZWN0aW9uSW5uZXIuYXBwZW5kKHBlb3BsZVJvdyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmb3JtYXRQcm9wZXJ0eSA9IChwcm9wZXJ0eSkgPT4gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKS5yZXBsYWNlQWxsKCdfJywgXCIgXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNob3dQbGFuZXRzID0gYXN5bmMgKHBsYW5ldHMsIGltYWdlcywgZm9ybWF0KSA9PiB7XHJcbiAgICBjb25zdCBwbGFuZXRzTGlzdCA9IHBsYW5ldHMucmVzdWx0cztcclxuICAgIGNvbnN0IHBsYW5ldHNJbWFnZXMgPSBpbWFnZXMucGxhbmV0cztcclxuICAgIGNvbnN0IHByZXZVcmwgPSBwbGFuZXRzLnByZXZpb3VzO1xyXG4gICAgY29uc3QgbmV4dFVybCA9IHBsYW5ldHMubmV4dDtcclxuICAgIGNvbnN0IHBsYW5ldHNMaW5rcyA9IHBsYW5ldHMucmVzdWx0cy5tYXAocGxhbmV0ID0+IHBsYW5ldC51cmwpO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnRNYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcclxuICAgIGNvbnN0IHBsYW5ldHNTZWN0aW9uID0gY29udGVudE1haW4ucXVlcnlTZWxlY3RvcignLnBsYW5ldHMtc2VjdGlvbicpO1xyXG4gICAgY29uc3QgcGxhbmV0c1NlY3Rpb25Jbm5lciA9IHBsYW5ldHNTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uX19pbm5lcicpO1xyXG4gICAgY29uc3QgcGxhbmV0c1RpdGxlID0gcGxhbmV0c1NlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX3RpdGxlJyk7XHJcbiAgICBjb25zdCBwbGFuZXRzUm93ID0gcGxhbmV0c1NlY3Rpb25Jbm5lci5xdWVyeVNlbGVjdG9yKCcucm93LnBsYW5ldHMtcm93Jyk7XHJcblxyXG4gICAgcGxhbmV0c1RpdGxlLnRleHRDb250ZW50ID0gYFBsYW5ldHMgZnJvbSBcIlN0YXIgV2Fyc1wiYDtcclxuICAgIHBsYW5ldHNSb3cuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgY29uc3QgbmFtZVByb3BlcnR5ID0gZm9ybWF0ID09PSAnd29va2llZScgPyAnd2hyYXNjd28nIDogJ25hbWUnO1xyXG5cclxuICAgIHBsYW5ldHNMaXN0LmZvckVhY2goYXN5bmMgKHBsYW5ldCwgaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCBwbGFuZXRJbmZvID0gYXdhaXQgbG9hZEpTT04ocGxhbmV0LnVybCArICc/Zm9ybWF0PScgKyBmb3JtYXQpO1xyXG4gICAgICAgIGNvbnN0IHBsYW5ldEltYWdlUGF0aCA9IHBsYW5ldHNJbWFnZXNbcGxhbmV0c0xpbmtzW2luZGV4XV07XHJcbiAgICAgICAgY29uc3QgcGxhbmV0Q29sdW1uID0gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbC1sZy0zIGNvbC1tZC02IHBsYW5ldC13cmFwcGVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzPSdwbGFuZXQnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdwbGFuZXRfX2hlYWRlcic+XHJcbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSdwbGFuZXRfX3Bob3RvJyBzcmM9JyR7cGxhbmV0SW1hZ2VQYXRofSc+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdwbGFuZXRfX2JvZHknPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPSdwbGFuZXRfX25hbWUnPiR7cGxhbmV0SW5mb1tuYW1lUHJvcGVydHldfTwvaDM+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgcGxhbmV0c1Jvdy5pbm5lckhUTUwgKz0gcGxhbmV0Q29sdW1uO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHByZXZCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJldi1idG4nKTtcclxuICAgIGNvbnN0IG5leHRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV4dC1idG4nKTtcclxuXHJcbiAgICBwcmV2QnV0dG9uLmRhdGFzZXQudXJsID0gcHJldlVybCAhPT0gbnVsbCA/IHByZXZVcmwgOiAnJztcclxuICAgIG5leHRCdXR0b24uZGF0YXNldC51cmwgPSBuZXh0VXJsICE9PSBudWxsID8gbmV4dFVybCA6ICcnO1xyXG59XHJcblxyXG4vLyAxNFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBjcmVhdGVJZEdlbmVyYXRvcigpIHtcclxuICAgIGxldCBpID0gMDtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHlpZWxkIGkrKztcclxuICAgIH1cclxufVxyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBwbGF5QXVkaW8gfSBmcm9tICcuLi9leHBvcnRzJztcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xyXG5cclxuaW1wb3J0IGJvdW5jZSBmcm9tICcuL2F1ZGlvLzhiaXRraXQtYm91bmNlLTIud2F2JztcclxuaW1wb3J0IGNvaW4gZnJvbSAnLi9hdWRpby84Yml0a2l0LWNvaW4tMTAud2F2JztcclxuaW1wb3J0IGV4cGxvc2lvbiBmcm9tICcuL2F1ZGlvLzhiaXRraXQtZXhwbG9zaW9uLTIud2F2JztcclxuaW1wb3J0IGZhbGwgZnJvbSAnLi9hdWRpby84Yml0a2l0LWZhbGwud2F2JztcclxuaW1wb3J0IGhpdCBmcm9tICcuL2F1ZGlvLzhiaXRraXQtaGl0LTQud2F2JztcclxuaW1wb3J0IGp1bXAgZnJvbSAnLi9hdWRpby84Yml0a2l0LWp1bXAtNi53YXYnO1xyXG5pbXBvcnQgbGFzZXIgZnJvbSAnLi9hdWRpby84Yml0a2l0LWxhc2VyLTQud2F2JztcclxuaW1wb3J0IHBvd2VydXAgZnJvbSAnLi9hdWRpby84Yml0a2l0LXBvd2VydXAtMi53YXYnO1xyXG5pbXBvcnQgc2VsZWN0IGZyb20gJy4vYXVkaW8vOGJpdGtpdC1zZWxlY3QtOC53YXYnO1xyXG5cclxuXHJcbmNvbnN0IGF1ZGlvTGlua3MgPSBbYm91bmNlLCBjb2luLCBleHBsb3Npb24sIGZhbGwsIGhpdCwganVtcCwgbGFzZXIsIHBvd2VydXAsIHNlbGVjdF07XHJcbmNvbnN0IGF1ZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F1ZGlvLnNvdW5kJyk7XHJcblxyXG5hdWRpb3MuZm9yRWFjaCgoYXVkaW8sIGluZGV4KSA9PiB7XHJcbiAgICBhdWRpby5zcmMgPSBhdWRpb0xpbmtzW2luZGV4XTtcclxufSk7XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBjb25zdCBjb2RlID0gZS5rZXlDb2RlO1xyXG4gICAgY29uc3QgYXVkaW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhdWRpb1tkYXRhLWtleT0nJHtjb2RlfSddYCk7XHJcbiAgICBjb25zdCBzb3VuZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5zb3VuZC1idXR0b25bZGF0YS1rZXk9JyR7Y29kZX0nXWApO1xyXG4gICAgcGxheUF1ZGlvKGF1ZGlvKTtcclxuICAgIHNvdW5kQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3NvdW5kLWJ1dHRvbl9fcGxheWluZycpO1xyXG59KTtcclxuXHJcbmNvbnN0IHNvdW5kQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zb3VuZC1idXR0b24nKTtcclxuXHJcbnNvdW5kQnV0dG9ucy5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IGUudGFyZ2V0LmRhdGFzZXQua2V5O1xyXG4gICAgICAgIGNvbnN0IGF1ZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYXVkaW9bZGF0YS1rZXk9JyR7Y29kZX0nXWApO1xyXG4gICAgICAgIHBsYXlBdWRpbyhhdWRpbyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3NvdW5kLWJ1dHRvbl9fcGxheWluZycpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuc291bmRCdXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IHByb3AgPSBlLnByb3BlcnR5TmFtZTtcclxuICAgICAgICBpZiAocHJvcCA9PSAndHJhbnNmb3JtJykgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NvdW5kLWJ1dHRvbl9fcGxheWluZycpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjg5MDI5Yjc3YWI2ZWFkNjQ1ZDIwOGJjZjhlNWYwZGEud2F2XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU0ZDg3NjFkNTg1M2FmZjc1NzFkODQ4ZTI1Yjg0MjBjLndhdlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyYzY1YzAyMDViNmFmYjliNTFiZDIxZDU1MTE0MzQ3Ni53YXZcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWNlMzNkYWRlZTY0ZmRlMzY2NTBlNzRhYWMwNjNiZTkud2F2XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjBjOTg4YjFjYzBlZDE2NmEzYjM5ZDIyOTQwY2U2MWFmLndhdlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNTdiNTY2NWQ0NTg0OTAyZWEwN2U3NmZjZDI1ZmYyYS53YXZcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmQwMjJhZmY4Y2RmMDE4NDIxMDkzMjlhMGM4YmY1M2Yud2F2XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjc2MjhjMWU1Zjg2N2EwOWM5MzIwZTU3YTZiOTQ3MGRlLndhdlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkOWU4MTI2Zjk1ZGU4NzI2NjhmZjA0ZDg1MzE3OTg4ZC53YXZcIjsiXSwic291cmNlUm9vdCI6IiJ9