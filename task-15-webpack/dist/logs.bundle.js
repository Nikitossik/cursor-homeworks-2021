(()=>{"use strict";var e=regeneratorRuntime.mark(g);function t(e,t,n,r,o,a,c){try{var s=e[a](c),i=s.value}catch(e){return void n(e)}s.done?t(i):Promise.resolve(i).then(r,o)}function n(e){return function(){var n=this,r=arguments;return new Promise((function(o,a){var c=e.apply(n,r);function s(e){t(c,o,a,s,i,"next",e)}function i(e){t(c,o,a,s,i,"throw",e)}s(void 0)}))}}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var c,s,i,u,l=function(){function e(t,n,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"getInfo",(function(){return"Студент ".concat(a.course,"-го курсу ").concat(a.university,", ").concat(a.fullName)})),o(this,"getAverageMark",(function(){return a.accepted?+(a.marks.reduce((function(e,t){return t+e}),0)/a.marks.length).toFixed(1):null})),o(this,"dismiss",(function(){a.accepted=!1})),o(this,"recover",(function(){a.accepted=!0})),this.university=t,this.course=n,this.fullName=r,this.marks=[],this.accepted=!0}var t,n;return t=e,(n=[{key:"studentMarks",get:function(){return this.accepted?this.marks:null},set:function(e){this.accepted&&this.marks.push(e)}}])&&r(t.prototype,n),e}();function f(){return(f=n(regeneratorRuntime.mark((function e(t){var n,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n="",r=regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=new Promise((function(e){setTimeout((function(){var t=String.fromCharCode(+Date.now().toString().slice(-5));e(t)}),50*t)})),e.t0=n,e.next=4,r;case 4:n=e.t0+=e.sent;case 5:case"end":return e.stop()}}),e)})),o=0;case 3:if(!(o<t)){e.next=8;break}return e.delegateYield(r(o),"t0",5);case 5:o++,e.next=3;break;case 8:return e.abrupt("return",n);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function g(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0;case 1:return e.next=4,t++;case 4:e.next=1;break;case 6:case"end":return e.stop()}}),e)}console.log("isPalyndrom('искать такси'): ".concat((i=(s=(c="искать такси").toLowerCase().replaceAll(/[\s—_,\.]/gi,"").split("").join("")).split("").reverse().join(""),'Строка "'.concat(c,'" ').concat(s===i?"":"не ","являеться полиндромом")))),console.log("setStudentsMarks(students, marks): ".concat(function(e,t){for(var n=[],r=0;r<e.length;r++)n[r]=[e[r],t[r]];return n}(["Олександр","Ігор","Олена","Іра","Олексій","Світлана"],[4,5,5,3,4,5]))),console.log("replaceBadWords('Fucking piece of shit'): ".concat(function(e){if(!e.length)return"Ви нічого не ввели!";for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=["shit","fuck"].concat(n),a=e.split(" ");return(a=a.map((function(e){return o.some((function(t){return e.toLowerCase().includes(t)}))&&o.filter((function(t){return e.toLowerCase().includes(t)})).forEach((function(t){var n="*".repeat(t.length),r=new RegExp(t,"gi");e=e.replaceAll(r,n)})),e}))).join(" ")}("Fucking piece of shit"))),console.log("calculateWordLetters('тест'): ".concat(JSON.stringify("искать такси"?(u="искать такси",function(e){if(Array.isArray(e))return a(e)}(u)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(u)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}(u)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).reduce((function(e,t){return e[t]=t in e?e[t]:0,e[t]++,e}),{}):"Пусте слово"))),console.log("getTotalTaxes.call(ukraine): ".concat(function(){return Math.floor(this.tax*this.middleSalary*this.vacancies)}.call({tax:.195,middleSalary:1789,vacancies:11476}))),console.group("Звичайний студент");var d=new l("Вищої Школи Психотерапії м.Одеса",2,"Остап Бендер");console.log("student.getInfo(): "+d.getInfo());for(var p=0;p<3;p++)d.studentMarks=5;console.group("Поставлено 3 оцінки 5"),console.log("student.studentMarks: "+d.studentMarks),console.log("student.getAverageMark(): "+d.getAverageMark()),console.groupEnd(),d.dismiss(),console.group("Студента виключено!"),console.log("student.studentMarks: "+d.studentMarks),console.log("student.getAverageMark(): "+d.getAverageMark()),console.groupEnd(),d.recover(),console.group("Студента поновлено!"),console.log("student.studentMarks: "+d.studentMarks),console.log("student.getAverageMark(): "+d.getAverageMark()),console.groupEnd(),console.groupEnd(),function(e){return f.apply(this,arguments)}(10).then((function(e){return console.log("Random chinese: ".concat(e))}));var v=g();console.log(v.next().value),console.log(v.next().value),console.log(v.next().value),console.log(v.next().value)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,