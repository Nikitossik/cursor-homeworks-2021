(()=>{"use strict";var n={740:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(4015),o=e.n(t),a=e(3645),i=e.n(a)()(o());i.push([n.id,".task-controls {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    padding-top: 40px;\r\n}\r\n\r\n.task-input {\r\n    margin: 0 20px 10px 0;\r\n    padding: 8px 25px;\r\n    border: 1px solid #333;\r\n    border-radius: 10px;\r\n    font-size: 1em;\r\n}\r\n\r\n.task-output {\r\n    padding-top: 150px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.blocks-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n}","",{version:3,sources:["webpack://./src/cube/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,sBAAsB;IACtB,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;AACrB",sourcesContent:[".task-controls {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    padding-top: 40px;\r\n}\r\n\r\n.task-input {\r\n    margin: 0 20px 10px 0;\r\n    padding: 8px 25px;\r\n    border: 1px solid #333;\r\n    border-radius: 10px;\r\n    font-size: 1em;\r\n}\r\n\r\n.task-output {\r\n    padding-top: 150px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.blocks-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n}"],sourceRoot:""}]);const s=i},7767:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(4015),o=e.n(t),a=e(3645),i=e.n(a)()(o());i.push([n.id,"*,\r\n*::before,\r\n*::after {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: sans-serif;\r\n  overflow-anchor: none;\r\n}\r\n\r\n.wrapper {\r\n  overflow-anchor: none\r\n}\r\n\r\n.section {\r\n  padding-top: 50px;\r\n  min-height: 100vh;\r\n}\r\n\r\n.section__inner {\r\n  padding: 0px 10px 20px 10px;\r\n}","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;;;EAGE,SAAS;EACT,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE;AACF;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["*,\r\n*::before,\r\n*::after {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: sans-serif;\r\n  overflow-anchor: none;\r\n}\r\n\r\n.wrapper {\r\n  overflow-anchor: none\r\n}\r\n\r\n.section {\r\n  padding-top: 50px;\r\n  min-height: 100vh;\r\n}\r\n\r\n.section__inner {\r\n  padding: 0px 10px 20px 10px;\r\n}"],sourceRoot:""}]);const s=i},3645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);t&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),r.push(c))}},r}},4015:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var t,o,a=[],i=!0,s=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(a.push(t.value),!r||a.length!==r);i=!0);}catch(n){s=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(s)throw o}}return a}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([u]).join("\n")}return[a].join("\n")}},3379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],u=t.base?c[0]+t.base:c[0],l=a[u]||0,p="".concat(u," ").concat(l);a[u]=l+1;var d=e(p),A={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(r[d].references++,r[d].updater(A)):r.push({identifier:p,updater:o(A,t),references:1}),i.push(p)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);r[s].references--}for(var c=t(n,o),u=0;u<a.length;u++){var l=e(a[u]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=c}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},9216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r),r}},3565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},3380:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t=e.css,o=e.media,a=e.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},4589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n=e(3379),r=e.n(n),t=e(3380),o=e.n(t),a=e(569),i=e.n(a),s=e(3565),c=e.n(s),u=e(9216),l=e.n(u),p=e(4589),d=e.n(p),A=e(7767),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),r()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;var v=e(740),m={};m.styleTagTransform=d(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),r()(v.Z,m),v.Z&&v.Z.locals&&v.Z.locals;var h=function(){for(var n=[],r=0;r<3;r++)n.push(Math.floor(256*Math.random()));return"rgb(".concat(n[0],",").concat(n[1],",").concat(n[2],")")},b=function(n,r){var e=document.createElement("div");return e.classList.add("block"),e.style.width="".concat(n,"px"),e.style.height="".concat(n,"px"),e.style.backgroundColor=r,e},y=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5,t=document.querySelector(".container");t.innerHTML="";for(var o=0;o<e;o++){var a=document.createElement("div");a.classList.add("blocks-row");for(var i=0;i<r;i++){var s=b(n,h());a.append(s)}t.append(a)}},g=document.querySelector(".task-form");y(50,5,5);var x=setInterval(y,1e3,50,5,5);g.addEventListener("change",(function(){var n=document.getElementById("size").value||50,r=document.getElementById("cols").value||5,e=document.getElementById("rows").value||5;clearInterval(x),y(n,r,e),x=setInterval(y,1e3,n,r,e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,